"""
https://leetcode-cn.com/problems/gas-station/

在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。

说明:

如果题目有解，该答案即为唯一答案。
输入数组均为非空数组，且长度相同。
输入数组中的元素均为非负数。
示例 1:

输入:
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]

输出: 3

解释:
从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
因此，3 可为起始索引。
示例 2:

输入:
gas  = [2,3,4]
cost = [3,4,3]

输出: -1

解释:
你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
因此，无论怎样，你都不可能绕环路行驶一周。

"""
from typing import List


"""
当我加到的gas小于我的cost，必然不能满足，直接-1


假设从编号为0站开始出发，一直到k站都正常，在开往k+1站时车子没油了。这时，应该将起点设置为k+1站。
理由是，这个k和k+1站当中的那条"分割线"把我的路程分成了A和B两段

其中我从k+1站出发一直到n-1都是"汽油量增加"的（B），从0-k都是"汽油量减少"（A）
代码中的run变量保存的就是从旧的start点出发，到现在这个点i时给车子带来的汽油量
当run小于0的时点，说明旧的start到i的这一段路程是"减少汽油量"的，就应该放在后面走（放到A中），所以要更新start

注意到正确答案是唯一的，所以B这一段必须只能"增加汽油量"，
这个增加是总体上的增加，只要一段路程能给我增加汽油量，这段路程就放到B，一旦不能就移动到A

其实选择0号站作为A和B的分界点只是一种选择，并不是绝对正确的分界点，只是选择一个特殊的点来分割，
在A的内部可能出现局部的"增加汽油量"，但是A总体上是"减少汽油量的"
"""
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        if sum(gas) < sum(cost):
            return -1

        run, start, n = 0, 0, len(gas)
        for i in range(n):
            run += gas[i] - cost[i]
            if run < 0:
                start = i + 1
                run = 0
        return start
